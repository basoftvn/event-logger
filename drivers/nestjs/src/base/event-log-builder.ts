import { hostname } from 'node:os';
import { Client } from 'pg';

// import { minimizeStacktrace } from 'fake/path/minimize-stacktrace';

import { EventLogEntity, LogLevels, writeEventLog } from '../data';

export class EventLogBuilder {
  private static readonly deviceName: string = hostname();
  private readonly eventLogInstance: EventLogEntity;

  public constructor(private readonly client: Client, type: LogLevels) {
    this.eventLogInstance = new EventLogEntity();
    this.eventLogInstance.type = type;
  }

  private generateStack(): string {
    const stack = new Error().stack;

    const stackLines = stack.split('\n');
    stackLines[0] = 'AutoGeneratedStackTrace:';
    stackLines.splice(1, 4);

    return stackLines.join('\n');
  }

  public scope(scope: string): EventLogBuilder {
    this.eventLogInstance.scope = scope;

    return this;
  }

  public message(message: string): EventLogBuilder {
    this.eventLogInstance.message = message;

    return this;
  }

  public stack(stack: string): EventLogBuilder {
    this.eventLogInstance.stack = stack;

    return this;
  }

  public detail(detail: string): EventLogBuilder {
    this.eventLogInstance.detail = detail;

    return this;
  }

  public attach(attachment: object): EventLogBuilder {
    this.eventLogInstance.attachment = attachment;

    return this;
  }

  public build(): EventLogEntity {
    const result = new EventLogEntity();

    Object.assign(result, this.eventLogInstance);

    return result;
  }

  public async commit(): Promise<void> {
    this.eventLogInstance.scope =
      this.eventLogInstance.scope ?? 'Undefined scope';
    this.eventLogInstance.message =
      this.eventLogInstance.message ?? 'No message';
    this.eventLogInstance.stack =
      this.eventLogInstance.stack ?? this.generateStack();
    this.eventLogInstance.detail = this.eventLogInstance.detail ?? '';
    this.eventLogInstance.source = EventLogBuilder.deviceName;

    writeEventLog(this.client, this.eventLogInstance);
  }
}
